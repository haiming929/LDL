//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
namespace LDL.Client.EF
{
    #region 上下文
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    public partial class LocalStoreEntities : ObjectContext
    {
        #region 构造函数
    
        /// <summary>
        /// 请使用应用程序配置文件的“LocalStoreEntities”部分中的连接字符串初始化新 LocalStoreEntities 对象。
        /// </summary>
        public LocalStoreEntities() : base("name=LocalStoreEntities", "LocalStoreEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 LocalStoreEntities 对象。
        /// </summary>
        public LocalStoreEntities(string connectionString) : base(connectionString, "LocalStoreEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 LocalStoreEntities 对象。
        /// </summary>
        public LocalStoreEntities(EntityConnection connection) : base(connection, "LocalStoreEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region 分部方法
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet 属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<LoginUserName> LoginUserName
        {
            get
            {
                if ((_LoginUserName == null))
                {
                    _LoginUserName = base.CreateObjectSet<LoginUserName>("LoginUserName");
                }
                return _LoginUserName;
            }
        }
        private ObjectSet<LoginUserName> _LoginUserName;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<UserSetting> UserSetting
        {
            get
            {
                if ((_UserSetting == null))
                {
                    _UserSetting = base.CreateObjectSet<UserSetting>("UserSetting");
                }
                return _UserSetting;
            }
        }
        private ObjectSet<UserSetting> _UserSetting;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Version> Version
        {
            get
            {
                if ((_Version == null))
                {
                    _Version = base.CreateObjectSet<Version>("Version");
                }
                return _Version;
            }
        }
        private ObjectSet<Version> _Version;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Parameter> Parameter
        {
            get
            {
                if ((_Parameter == null))
                {
                    _Parameter = base.CreateObjectSet<Parameter>("Parameter");
                }
                return _Parameter;
            }
        }
        private ObjectSet<Parameter> _Parameter;

        #endregion

        #region AddTo 方法
    
        /// <summary>
        /// 用于向 LoginUserName EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToLoginUserName(LoginUserName loginUserName)
        {
            base.AddObject("LoginUserName", loginUserName);
        }
    
        /// <summary>
        /// 用于向 UserSetting EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToUserSetting(UserSetting userSetting)
        {
            base.AddObject("UserSetting", userSetting);
        }
    
        /// <summary>
        /// 用于向 Version EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToVersion(Version version)
        {
            base.AddObject("Version", version);
        }
    
        /// <summary>
        /// 用于向 Parameter EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToParameter(Parameter parameter)
        {
            base.AddObject("Parameter", parameter);
        }

        #endregion

    }

    #endregion

    #region 实体
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LocalStoreModel", Name="LoginUserName")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LoginUserName : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 LoginUserName 对象。
        /// </summary>
        /// <param name="userName">UserName 属性的初始值。</param>
        /// <param name="loginTime">LoginTime 属性的初始值。</param>
        public static LoginUserName CreateLoginUserName(global::System.String userName, global::System.DateTime loginTime)
        {
            LoginUserName loginUserName = new LoginUserName();
            loginUserName.UserName = userName;
            loginUserName.LoginTime = loginTime;
            return loginUserName;
        }

        #endregion

        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
                if (_UserName != value)
                {
                    OnUserNameChanging(value);
                    ReportPropertyChanging("UserName");
                    _UserName = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("UserName");
                    OnUserNameChanged();
                }
            }
        }
        private global::System.String _UserName;
        partial void OnUserNameChanging(global::System.String value);
        partial void OnUserNameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime LoginTime
        {
            get
            {
                return _LoginTime;
            }
            set
            {
                OnLoginTimeChanging(value);
                ReportPropertyChanging("LoginTime");
                _LoginTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LoginTime");
                OnLoginTimeChanged();
            }
        }
        private global::System.DateTime _LoginTime;
        partial void OnLoginTimeChanging(global::System.DateTime value);
        partial void OnLoginTimeChanged();

        #endregion

    
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LocalStoreModel", Name="Parameter")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Parameter : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 Parameter 对象。
        /// </summary>
        /// <param name="type">Type 属性的初始值。</param>
        /// <param name="code">Code 属性的初始值。</param>
        /// <param name="name">Name 属性的初始值。</param>
        /// <param name="orderID">OrderID 属性的初始值。</param>
        /// <param name="valid">Valid 属性的初始值。</param>
        public static Parameter CreateParameter(global::System.String type, global::System.String code, global::System.String name, global::System.Int32 orderID, global::System.Boolean valid)
        {
            Parameter parameter = new Parameter();
            parameter.Type = type;
            parameter.Code = code;
            parameter.Name = name;
            parameter.OrderID = orderID;
            parameter.Valid = valid;
            return parameter;
        }

        #endregion

        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Type
        {
            get
            {
                return _Type;
            }
            set
            {
                if (_Type != value)
                {
                    OnTypeChanging(value);
                    ReportPropertyChanging("Type");
                    _Type = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Type");
                    OnTypeChanged();
                }
            }
        }
        private global::System.String _Type;
        partial void OnTypeChanging(global::System.String value);
        partial void OnTypeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ParentCode
        {
            get
            {
                return _ParentCode;
            }
            set
            {
                OnParentCodeChanging(value);
                ReportPropertyChanging("ParentCode");
                _ParentCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ParentCode");
                OnParentCodeChanged();
            }
        }
        private global::System.String _ParentCode;
        partial void OnParentCodeChanging(global::System.String value);
        partial void OnParentCodeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 OrderID
        {
            get
            {
                return _OrderID;
            }
            set
            {
                OnOrderIDChanging(value);
                ReportPropertyChanging("OrderID");
                _OrderID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OrderID");
                OnOrderIDChanged();
            }
        }
        private global::System.Int32 _OrderID;
        partial void OnOrderIDChanging(global::System.Int32 value);
        partial void OnOrderIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Valid
        {
            get
            {
                return _Valid;
            }
            set
            {
                OnValidChanging(value);
                ReportPropertyChanging("Valid");
                _Valid = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Valid");
                OnValidChanged();
            }
        }
        private global::System.Boolean _Valid;
        partial void OnValidChanging(global::System.Boolean value);
        partial void OnValidChanged();

        #endregion

    
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LocalStoreModel", Name="UserSetting")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UserSetting : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 UserSetting 对象。
        /// </summary>
        /// <param name="key">Key 属性的初始值。</param>
        public static UserSetting CreateUserSetting(global::System.String key)
        {
            UserSetting userSetting = new UserSetting();
            userSetting.Key = key;
            return userSetting;
        }

        #endregion

        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Key
        {
            get
            {
                return _Key;
            }
            set
            {
                if (_Key != value)
                {
                    OnKeyChanging(value);
                    ReportPropertyChanging("Key");
                    _Key = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Key");
                    OnKeyChanged();
                }
            }
        }
        private global::System.String _Key;
        partial void OnKeyChanging(global::System.String value);
        partial void OnKeyChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.String _Value;
        partial void OnValueChanging(global::System.String value);
        partial void OnValueChanged();

        #endregion

    
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LocalStoreModel", Name="Version")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Version : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 Version 对象。
        /// </summary>
        /// <param name="type">Type 属性的初始值。</param>
        /// <param name="version1">Version1 属性的初始值。</param>
        public static Version CreateVersion(global::System.String type, global::System.Int32 version1)
        {
            Version version = new Version();
            version.Type = type;
            version.Version1 = version1;
            return version;
        }

        #endregion

        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Type
        {
            get
            {
                return _Type;
            }
            set
            {
                if (_Type != value)
                {
                    OnTypeChanging(value);
                    ReportPropertyChanging("Type");
                    _Type = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Type");
                    OnTypeChanged();
                }
            }
        }
        private global::System.String _Type;
        partial void OnTypeChanging(global::System.String value);
        partial void OnTypeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Version1
        {
            get
            {
                return _Version1;
            }
            set
            {
                OnVersion1Changing(value);
                ReportPropertyChanging("Version1");
                _Version1 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Version1");
                OnVersion1Changed();
            }
        }
        private global::System.Int32 _Version1;
        partial void OnVersion1Changing(global::System.Int32 value);
        partial void OnVersion1Changed();

        #endregion

    
    }

    #endregion

    
}
